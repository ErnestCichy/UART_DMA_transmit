
UART_DMA_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f20  08004f20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000070  08004f98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08004f98  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ad4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d2  00000000  00000000  00030b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00033348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00033f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fcd  00000000  00000000  00034a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a53  00000000  00000000  00057a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4996  00000000  00000000  000684b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ce46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  0013ce98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004ea0 	.word	0x08004ea0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004ea0 	.word	0x08004ea0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_DMA_Init+0x2c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <MX_DMA_Init+0x2c>)
 80005d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_DMA_Init+0x2c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b47      	ldr	r3, [pc, #284]	; (8000728 <MX_GPIO_Init+0x134>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <MX_GPIO_Init+0x134>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <MX_GPIO_Init+0x134>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b41      	ldr	r3, [pc, #260]	; (8000728 <MX_GPIO_Init+0x134>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a40      	ldr	r2, [pc, #256]	; (8000728 <MX_GPIO_Init+0x134>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <MX_GPIO_Init+0x134>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b3b      	ldr	r3, [pc, #236]	; (8000728 <MX_GPIO_Init+0x134>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <MX_GPIO_Init+0x134>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <MX_GPIO_Init+0x134>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <MX_GPIO_Init+0x134>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a34      	ldr	r2, [pc, #208]	; (8000728 <MX_GPIO_Init+0x134>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <MX_GPIO_Init+0x134>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_GPIO_Init+0x134>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <MX_GPIO_Init+0x134>)
 8000670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_GPIO_Init+0x134>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_GPIO_Init+0x134>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a28      	ldr	r2, [pc, #160]	; (8000728 <MX_GPIO_Init+0x134>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_GPIO_Init+0x134>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f244 0181 	movw	r1, #16513	; 0x4081
 80006a0:	4822      	ldr	r0, [pc, #136]	; (800072c <MX_GPIO_Init+0x138>)
 80006a2:	f001 f9f1 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	4821      	ldr	r0, [pc, #132]	; (8000730 <MX_GPIO_Init+0x13c>)
 80006ac:	f001 f9ec 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	481b      	ldr	r0, [pc, #108]	; (8000734 <MX_GPIO_Init+0x140>)
 80006c8:	f001 f842 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4811      	ldr	r0, [pc, #68]	; (800072c <MX_GPIO_Init+0x138>)
 80006e6:	f001 f833 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0x13c>)
 8000702:	f001 f825 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_GPIO_Init+0x13c>)
 800071a:	f001 f819 	bl	8001750 <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40020400 	.word	0x40020400
 8000730:	40021800 	.word	0x40021800
 8000734:	40020800 	.word	0x40020800

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 faf9 	bl	8000d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f828 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f7ff ff56 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000748:	f000 f958 	bl	80009fc <MX_USART3_UART_Init>
  MX_DMA_Init();
 800074c:	f7ff ff3a 	bl	80005c4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000750:	f000 fa1e 	bl	8000b90 <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000754:	f000 f88c 	bl	8000870 <MX_NVIC_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  Lenght = sprintf((char*)Message, "Test 123\r\n");
 8000758:	490a      	ldr	r1, [pc, #40]	; (8000784 <main+0x4c>)
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <main+0x50>)
 800075c:	f003 ff32 	bl	80045c4 <siprintf>
 8000760:	4603      	mov	r3, r0
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <main+0x54>)
 8000766:	701a      	strb	r2, [r3, #0]
	//  HAL_UART_Transmit_DMA(&huart3, Message, Lenght);
	  HAL_UART_Transmit(&huart3, Message, Lenght, 10);	//to samo bez DMA
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <main+0x54>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b29a      	uxth	r2, r3
 800076e:	230a      	movs	r3, #10
 8000770:	4905      	ldr	r1, [pc, #20]	; (8000788 <main+0x50>)
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <main+0x58>)
 8000774:	f002 fbac 	bl	8002ed0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f000 fb36 	bl	8000dec <HAL_Delay>
	  Lenght = sprintf((char*)Message, "Test 123\r\n");
 8000780:	e7ea      	b.n	8000758 <main+0x20>
 8000782:	bf00      	nop
 8000784:	08004eb8 	.word	0x08004eb8
 8000788:	2000008c 	.word	0x2000008c
 800078c:	200000ac 	.word	0x200000ac
 8000790:	200000b4 	.word	0x200000b4

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 ff06 	bl	80045b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b8:	f001 fac8 	bl	8001d4c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <SystemClock_Config+0xd4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a29      	ldr	r2, [pc, #164]	; (8000868 <SystemClock_Config+0xd4>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <SystemClock_Config+0xd4>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <SystemClock_Config+0xd8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a24      	ldr	r2, [pc, #144]	; (800086c <SystemClock_Config+0xd8>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <SystemClock_Config+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000804:	23d8      	movs	r3, #216	; 0xd8
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800080c:	2309      	movs	r3, #9
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f001 faf9 	bl	8001e0c <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000820:	f000 f83c 	bl	800089c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000824:	f001 faa2 	bl	8001d6c <HAL_PWREx_EnableOverDrive>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800082e:	f000 f835 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2107      	movs	r1, #7
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fd7f 	bl	8002354 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800085c:	f000 f81e 	bl	800089c <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3750      	adds	r7, #80	; 0x50
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	200e      	movs	r0, #14
 800087a:	f000 fbb6 	bl	8000fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800087e:	200e      	movs	r0, #14
 8000880:	f000 fbcf 	bl	8001022 <HAL_NVIC_EnableIRQ>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
	{

	}
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x44>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x44>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x44>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x44>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x44>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 fa36 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <DMA1_Stream3_IRQHandler+0x10>)
 800094a:	f000 fcc5 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000013c 	.word	0x2000013c

08000958 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <USART3_IRQHandler+0x10>)
 800095e:	f002 fb3b 	bl	8002fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000b4 	.word	0x200000b4

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f003 fde0 	bl	8004560 <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20040000 	.word	0x20040000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	200000b0 	.word	0x200000b0
 80009d4:	200006b8 	.word	0x200006b8

080009d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART3_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART3_UART_Init+0x58>)
 8000a40:	f002 f9f8 	bl	8002e34 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f7ff ff27 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000b4 	.word	0x200000b4
 8000a58:	40004800 	.word	0x40004800

08000a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0aa      	sub	sp, #168	; 0xa8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fd99 	bl	80045b4 <memset>
  if(uartHandle->Instance==USART3)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a3d      	ldr	r2, [pc, #244]	; (8000b7c <HAL_UART_MspInit+0x120>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d172      	bne.n	8000b72 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fe80 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa6:	f7ff fef9 	bl	800089c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aaa:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <HAL_UART_MspInit+0x124>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a34      	ldr	r2, [pc, #208]	; (8000b80 <HAL_UART_MspInit+0x124>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_UART_MspInit+0x124>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_UART_MspInit+0x124>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <HAL_UART_MspInit+0x124>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_UART_MspInit+0x124>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <HAL_UART_MspInit+0x128>)
 8000b02:	f000 fe25 	bl	8001750 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b08:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <HAL_UART_MspInit+0x130>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b16:	2240      	movs	r2, #64	; 0x40
 8000b18:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000b46:	4810      	ldr	r0, [pc, #64]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b48:	f000 fa86 	bl	8001058 <HAL_DMA_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000b52:	f7ff fea3 	bl	800089c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b5a:	671a      	str	r2, [r3, #112]	; 0x70
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_UART_MspInit+0x12c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2027      	movs	r0, #39	; 0x27
 8000b68:	f000 fa3f 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b6c:	2027      	movs	r0, #39	; 0x27
 8000b6e:	f000 fa58 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b72:	bf00      	nop
 8000b74:	37a8      	adds	r7, #168	; 0xa8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	2000013c 	.word	0x2000013c
 8000b8c:	40026058 	.word	0x40026058

08000b90 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2206      	movs	r2, #6
 8000ba0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	f000 ff71 	bl	8001aba <HAL_PCD_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bde:	f7ff fe5d 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000019c 	.word	0x2000019c

08000bec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0aa      	sub	sp, #168	; 0xa8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fcd1 	bl	80045b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c1a:	d159      	bne.n	8000cd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fdb7 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c38:	f7ff fe30 	bl	800089c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <HAL_PCD_MspInit+0xf0>)
 8000c7c:	f000 fd68 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <HAL_PCD_MspInit+0xf0>)
 8000c9c:	f000 fd58 	bl	8001750 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000caa:	6353      	str	r3, [r2, #52]	; 0x34
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <HAL_PCD_MspInit+0xec>)
 8000cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	37a8      	adds	r7, #168	; 0xa8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d0a:	f7ff fe65 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f003 fc2d 	bl	800456c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fd11 	bl	8000738 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d24:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000d28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d2c:	200006b8 	.word	0x200006b8

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>

08000d32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 f94c 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 f805 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d42:	f7ff fdb1 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f967 	bl	800103e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f92f 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200006a4 	.word	0x200006a4

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200006a4 	.word	0x200006a4

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x40>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	05fa0000 	.word	0x05fa0000

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff feb6 	bl	8000dd4 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e099      	b.n	80011a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001094:	e00f      	b.n	80010b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001096:	f7ff fe9d 	bl	8000dd4 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d908      	bls.n	80010b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e078      	b.n	80011a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e8      	bne.n	8001096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_DMA_Init+0x158>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	2b04      	cmp	r3, #4
 800110e:	d107      	bne.n	8001120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4313      	orrs	r3, r2
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f023 0307 	bic.w	r3, r3, #7
 8001136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2b04      	cmp	r3, #4
 8001148:	d117      	bne.n	800117a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00e      	beq.n	800117a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fa7b 	bl	8001658 <DMA_CheckFifoParam>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001176:	2301      	movs	r3, #1
 8001178:	e016      	b.n	80011a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fa32 	bl	80015ec <DMA_CalcBaseAndBitshift>
 8001188:	4603      	mov	r3, r0
 800118a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001190:	223f      	movs	r2, #63	; 0x3f
 8001192:	409a      	lsls	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	e010803f 	.word	0xe010803f

080011b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c2:	f7ff fe07 	bl	8000dd4 <HAL_GetTick>
 80011c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d008      	beq.n	80011e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e052      	b.n	800128c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0216 	bic.w	r2, r2, #22
 80011f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_DMA_Abort+0x62>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0208 	bic.w	r2, r2, #8
 8001224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001236:	e013      	b.n	8001260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001238:	f7ff fdcc 	bl	8000dd4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b05      	cmp	r3, #5
 8001244:	d90c      	bls.n	8001260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2220      	movs	r2, #32
 800124a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e015      	b.n	800128c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e4      	bne.n	8001238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	223f      	movs	r2, #63	; 0x3f
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00c      	b.n	80012cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80012e4:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <HAL_DMA_IRQHandler+0x248>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a8e      	ldr	r2, [pc, #568]	; (8001524 <HAL_DMA_IRQHandler+0x24c>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a9b      	lsrs	r3, r3, #10
 80012f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2208      	movs	r2, #8
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2208      	movs	r2, #8
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2201      	movs	r2, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2204      	movs	r2, #4
 8001380:	409a      	lsls	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2204      	movs	r2, #4
 800139e:	409a      	lsls	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	f043 0204 	orr.w	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2210      	movs	r2, #16
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d043      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d03c      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2210      	movs	r2, #16
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d018      	beq.n	800141a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d024      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
 8001406:	e01f      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01b      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e016      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2220      	movs	r2, #32
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 808f 	beq.w	8001578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8087 	beq.w	8001578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	2220      	movs	r2, #32
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d136      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0216 	bic.w	r2, r2, #22
 8001490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	223f      	movs	r2, #63	; 0x3f
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07e      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
        }
        return;
 80014ee:	e079      	b.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	2b00      	cmp	r3, #0
 8001512:	d031      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e02c      	b.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
 800151e:	bf00      	nop
 8001520:	20000000 	.word	0x20000000
 8001524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d023      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
 8001538:	e01e      	b.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10f      	bne.n	8001568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2205      	movs	r2, #5
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d307      	bcc.n	80015c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f2      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x2cc>
 80015be:	e000      	b.n	80015c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e000      	b.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015e4:	bf00      	nop
    }
  }
}
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3b10      	subs	r3, #16
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <DMA_CalcBaseAndBitshift+0x60>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <DMA_CalcBaseAndBitshift+0x64>)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d908      	bls.n	800162c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <DMA_CalcBaseAndBitshift+0x68>)
 8001622:	4013      	ands	r3, r2
 8001624:	1d1a      	adds	r2, r3, #4
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	659a      	str	r2, [r3, #88]	; 0x58
 800162a:	e006      	b.n	800163a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <DMA_CalcBaseAndBitshift+0x68>)
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	aaaaaaab 	.word	0xaaaaaaab
 8001650:	08004edc 	.word	0x08004edc
 8001654:	fffffc00 	.word	0xfffffc00

08001658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11f      	bne.n	80016b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d856      	bhi.n	8001726 <DMA_CheckFifoParam+0xce>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <DMA_CheckFifoParam+0x28>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001691 	.word	0x08001691
 8001684:	080016a3 	.word	0x080016a3
 8001688:	08001691 	.word	0x08001691
 800168c:	08001727 	.word	0x08001727
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d046      	beq.n	800172a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a0:	e043      	b.n	800172a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016aa:	d140      	bne.n	800172e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b0:	e03d      	b.n	800172e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ba:	d121      	bne.n	8001700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d837      	bhi.n	8001732 <DMA_CheckFifoParam+0xda>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x70>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016df 	.word	0x080016df
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	080016f1 	.word	0x080016f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
      break;
 80016dc:	e030      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d025      	beq.n	8001736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ee:	e022      	b.n	8001736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f8:	d11f      	bne.n	800173a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016fe:	e01c      	b.n	800173a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d903      	bls.n	800170e <DMA_CheckFifoParam+0xb6>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d003      	beq.n	8001714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800170c:	e018      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
      break;
 8001712:	e015      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      break;
 8001724:	e00b      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 8001726:	bf00      	nop
 8001728:	e00a      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800172a:	bf00      	nop
 800172c:	e008      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800172e:	bf00      	nop
 8001730:	e006      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
 8001734:	e004      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;   
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800173e:	bf00      	nop
    }
  } 
  
  return status; 
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e169      	b.n	8001a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8158 	bne.w	8001a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d005      	beq.n	80017a6 <HAL_GPIO_Init+0x56>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b03      	cmp	r3, #3
 8001812:	d017      	beq.n	8001844 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80b2 	beq.w	8001a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018f2:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <HAL_GPIO_Init+0x310>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x314>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_GPIO_Init+0x318>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_GPIO_Init+0x31c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <HAL_GPIO_Init+0x320>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x21a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_GPIO_Init+0x324>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x216>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_GPIO_Init+0x328>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x212>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x32c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x330>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x20a>
 8001956:	2307      	movs	r3, #7
 8001958:	e00e      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195a:	2308      	movs	r3, #8
 800195c:	e00c      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195e:	2306      	movs	r3, #6
 8001960:	e00a      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001962:	2305      	movs	r3, #5
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001966:	2304      	movs	r3, #4
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x310>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f ae92 	bls.w	8001770 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40021400 	.word	0x40021400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40021c00 	.word	0x40021c00
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abc:	b08f      	sub	sp, #60	; 0x3c
 8001abe:	af0a      	add	r7, sp, #40	; 0x28
 8001ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e116      	b.n	8001cfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f880 	bl	8000bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fa7c 	bl	8004008 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	687e      	ldr	r6, [r7, #4]
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f106 0410 	add.w	r4, r6, #16
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b2e:	1d33      	adds	r3, r6, #4
 8001b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f002 f9e0 	bl	8003ef8 <USB_CoreInit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0d7      	b.n	8001cfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fa6a 	bl	800402a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e04a      	b.n	8001bf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	333d      	adds	r3, #61	; 0x3d
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3344      	adds	r3, #68	; 0x44
 8001b98:	4602      	mov	r2, r0
 8001b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3340      	adds	r3, #64	; 0x40
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	334c      	adds	r3, #76	; 0x4c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3af      	bcc.n	8001b5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e044      	b.n	8001c8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3b5      	bcc.n	8001c02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	1d33      	adds	r3, r6, #4
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f002 fa03 	bl	80040c4 <USB_DevInit>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e014      	b.n	8001cfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d102      	bne.n	8001cee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f80b 	bl	8001d04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fbd1 	bl	800449a <USB_DevDisconnect>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_PCDEx_ActivateLPM+0x44>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	10000003 	.word	0x10000003

08001d4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9a:	f7ff f81b 	bl	8000dd4 <HAL_GetTick>
 8001d9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001da0:	e009      	b.n	8001db6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001da2:	f7ff f817 	bl	8000dd4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db0:	d901      	bls.n	8001db6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e022      	b.n	8001dfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7ff f800 	bl	8000dd4 <HAL_GetTick>
 8001dd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd6:	e009      	b.n	8001dec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd8:	f7fe fffc 	bl	8000dd4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de6:	d901      	bls.n	8001dec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e007      	b.n	8001dfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e291      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e30:	4b96      	ldr	r3, [pc, #600]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3c:	4b93      	ldr	r3, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_OscConfig+0x62>
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x130>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d168      	bne.n	8001f3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e26b      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x7a>
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a83      	ldr	r2, [pc, #524]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e02e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x9c>
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7e      	ldr	r2, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b7c      	ldr	r3, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7b      	ldr	r2, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd8>
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6b      	ldr	r2, [pc, #428]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe ff72 	bl	8000dd4 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe ff6e 	bl	8000dd4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e21f      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff5e 	bl	8000dd4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ff5a 	bl	8000dd4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e20b      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x110>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d069      	beq.n	800201e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x190>
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x17a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e1df      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	493d      	ldr	r1, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	e040      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff10 	bl	8000dd4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ff0c 	bl	8000dd4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1bd      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4929      	ldr	r1, [pc, #164]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
 8001fea:	e018      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe feec 	bl	8000dd4 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe fee8 	bl	8000dd4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e199      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d038      	beq.n	800209c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7fe fec9 	bl	8000dd4 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7fe fec5 	bl	8000dd4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e176      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x280>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x23a>
 8002064:	e01a      	b.n	800209c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x280>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe feaf 	bl	8000dd4 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7fe feab 	bl	8000dd4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d903      	bls.n	8002090 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e15c      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
 800208c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a4 	beq.w	80021f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7e      	ldr	r2, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fe73 	bl	8000dd4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fe6f 	bl	8000dd4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e120      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x31a>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	e02d      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x33c>
 800212e:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x35e>
 8002150:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	e00b      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe fe23 	bl	8000dd4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fe1f 	bl	8000dd4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0ce      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCC_OscConfig+0x386>
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7fe fe0d 	bl	8000dd4 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fe09 	bl	8000dd4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80a4 	beq.w	8002344 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d06b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d149      	bne.n	80022a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fdda 	bl	8000dd4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fdd6 	bl	8000dd4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e087      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	4313      	orrs	r3, r2
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800226a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800226e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fdaa 	bl	8000dd4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fda6 	bl	8000dd4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e057      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x478>
 80022a2:	e04f      	b.n	8002344 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fd90 	bl	8000dd4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fd8c 	bl	8000dd4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e03d      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4ac>
 80022d6:	e035      	b.n	8002344 <HAL_RCC_OscConfig+0x538>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x544>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002316:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d0      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	4965      	ldr	r1, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d040      	beq.n	8002478 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d115      	bne.n	8002436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e073      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4936      	ldr	r1, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002448:	f7fe fcc4 	bl	8000dd4 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe fcc0 	bl	8000dd4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e053      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 020f 	bic.w	r2, r3, #15
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1d0>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fc20 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08004ec4 	.word	0x08004ec4
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b094      	sub	sp, #80	; 0x50
 8002532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
 8002538:	2300      	movs	r3, #0
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800253c:	2300      	movs	r3, #0
 800253e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d00d      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002550:	2b08      	cmp	r3, #8
 8002552:	f200 80e1 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3a>
 800255e:	e0db      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b73      	ldr	r3, [pc, #460]	; (8002730 <HAL_RCC_GetSysClockFreq+0x204>)
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002564:	e0db      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_GetSysClockFreq+0x208>)
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800256a:	e0d8      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	2200      	movs	r2, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
 800258c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
 800259a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b0:	0150      	lsls	r0, r2, #5
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4621      	mov	r1, r4
 80025b8:	1a51      	subs	r1, r2, r1
 80025ba:	6139      	str	r1, [r7, #16]
 80025bc:	4629      	mov	r1, r5
 80025be:	eb63 0301 	sbc.w	r3, r3, r1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d0:	4659      	mov	r1, fp
 80025d2:	018b      	lsls	r3, r1, #6
 80025d4:	4651      	mov	r1, sl
 80025d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025da:	4651      	mov	r1, sl
 80025dc:	018a      	lsls	r2, r1, #6
 80025de:	4651      	mov	r1, sl
 80025e0:	ebb2 0801 	subs.w	r8, r2, r1
 80025e4:	4659      	mov	r1, fp
 80025e6:	eb63 0901 	sbc.w	r9, r3, r1
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025fe:	4690      	mov	r8, r2
 8002600:	4699      	mov	r9, r3
 8002602:	4623      	mov	r3, r4
 8002604:	eb18 0303 	adds.w	r3, r8, r3
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	462b      	mov	r3, r5
 800260c:	eb49 0303 	adc.w	r3, r9, r3
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800261e:	4629      	mov	r1, r5
 8002620:	024b      	lsls	r3, r1, #9
 8002622:	4621      	mov	r1, r4
 8002624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002628:	4621      	mov	r1, r4
 800262a:	024a      	lsls	r2, r1, #9
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002632:	2200      	movs	r2, #0
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
 8002636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800263c:	f7fd fe40 	bl	80002c0 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002648:	e058      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	2200      	movs	r2, #0
 8002652:	4618      	mov	r0, r3
 8002654:	4611      	mov	r1, r2
 8002656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	f04f 0000 	mov.w	r0, #0
 800266c:	f04f 0100 	mov.w	r1, #0
 8002670:	0159      	lsls	r1, r3, #5
 8002672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002676:	0150      	lsls	r0, r2, #5
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4641      	mov	r1, r8
 800267e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002682:	4649      	mov	r1, r9
 8002684:	eb63 0b01 	sbc.w	fp, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800269c:	ebb2 040a 	subs.w	r4, r2, sl
 80026a0:	eb63 050b 	sbc.w	r5, r3, fp
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	00eb      	lsls	r3, r5, #3
 80026ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b2:	00e2      	lsls	r2, r4, #3
 80026b4:	4614      	mov	r4, r2
 80026b6:	461d      	mov	r5, r3
 80026b8:	4643      	mov	r3, r8
 80026ba:	18e3      	adds	r3, r4, r3
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	464b      	mov	r3, r9
 80026c0:	eb45 0303 	adc.w	r3, r5, r3
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d2:	4629      	mov	r1, r5
 80026d4:	028b      	lsls	r3, r1, #10
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026dc:	4621      	mov	r1, r4
 80026de:	028a      	lsls	r2, r1, #10
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e6:	2200      	movs	r2, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	61fa      	str	r2, [r7, #28]
 80026ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f0:	f7fd fde6 	bl	80002c0 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4613      	mov	r3, r2
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800270c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800270e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002716:	e002      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetSysClockFreq+0x204>)
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800271c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002720:	4618      	mov	r0, r3
 8002722:	3750      	adds	r7, #80	; 0x50
 8002724:	46bd      	mov	sp, r7
 8002726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_GetHCLKFreq+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002754:	f7ff fff0 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0a9b      	lsrs	r3, r3, #10
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4903      	ldr	r1, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	08004ed4 	.word	0x08004ed4

08002778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800277c:	f7ff ffdc 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0b5b      	lsrs	r3, r3, #13
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK2Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	08004ed4 	.word	0x08004ed4

080027a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d012      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027c4:	4b65      	ldr	r3, [pc, #404]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a64      	ldr	r2, [pc, #400]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ce:	6093      	str	r3, [r2, #8]
 80027d0:	4b62      	ldr	r3, [pc, #392]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	4960      	ldr	r1, [pc, #384]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d017      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f6:	4b59      	ldr	r3, [pc, #356]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	4955      	ldr	r1, [pc, #340]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002832:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002838:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	4946      	ldr	r1, [pc, #280]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 808b 	beq.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b3a      	ldr	r3, [pc, #232]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	4a39      	ldr	r2, [pc, #228]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287a:	6413      	str	r3, [r2, #64]	; 0x40
 800287c:	4b37      	ldr	r3, [pc, #220]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002888:	4b35      	ldr	r3, [pc, #212]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fa9e 	bl	8000dd4 <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe fa9a 	bl	8000dd4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e2bc      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d035      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d02e      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d114      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fa62 	bl	8000dd4 <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7fe fa5e 	bl	8000dd4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e27e      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ee      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002942:	d111      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002952:	400b      	ands	r3, r1
 8002954:	4901      	ldr	r1, [pc, #4]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
 800295a:	e00b      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800295c:	40023800 	.word	0x40023800
 8002960:	40007000 	.word	0x40007000
 8002964:	0ffffcff 	.word	0x0ffffcff
 8002968:	4ba4      	ldr	r3, [pc, #656]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4aa3      	ldr	r2, [pc, #652]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800296e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	4ba1      	ldr	r3, [pc, #644]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	499e      	ldr	r1, [pc, #632]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d010      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002992:	4b9a      	ldr	r3, [pc, #616]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002998:	4a98      	ldr	r2, [pc, #608]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800299e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029a2:	4b96      	ldr	r3, [pc, #600]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	4993      	ldr	r1, [pc, #588]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c0:	4b8e      	ldr	r3, [pc, #568]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	498b      	ldr	r1, [pc, #556]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e2:	4b86      	ldr	r3, [pc, #536]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f0:	4982      	ldr	r1, [pc, #520]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a04:	4b7d      	ldr	r3, [pc, #500]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a12:	497a      	ldr	r1, [pc, #488]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a26:	4b75      	ldr	r3, [pc, #468]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f023 0203 	bic.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	4971      	ldr	r1, [pc, #452]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a48:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f023 020c 	bic.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4969      	ldr	r1, [pc, #420]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	4960      	ldr	r1, [pc, #384]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a8c:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	4958      	ldr	r1, [pc, #352]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aae:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	494f      	ldr	r1, [pc, #316]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	4947      	ldr	r1, [pc, #284]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	493e      	ldr	r1, [pc, #248]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4936      	ldr	r1, [pc, #216]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	492d      	ldr	r1, [pc, #180]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b74:	4921      	ldr	r1, [pc, #132]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b96:	4919      	ldr	r1, [pc, #100]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb8:	4910      	ldr	r1, [pc, #64]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d006      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 809d 	beq.w	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe f8f8 	bl	8000dd4 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be6:	e00b      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002be8:	f7fe f8f4 	bl	8000dd4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d904      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e116      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c00:	4b8b      	ldr	r3, [pc, #556]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ed      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d113      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c20:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c26:	0e1b      	lsrs	r3, r3, #24
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	019a      	lsls	r2, r3, #6
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	071b      	lsls	r3, r3, #28
 8002c40:	497b      	ldr	r1, [pc, #492]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c72:	d11f      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c74:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7a:	0f1b      	lsrs	r3, r3, #28
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	019a      	lsls	r2, r3, #6
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	071b      	lsls	r3, r3, #28
 8002c94:	4966      	ldr	r1, [pc, #408]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c9c:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca2:	f023 021f 	bic.w	r2, r3, #31
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	4960      	ldr	r1, [pc, #384]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	019a      	lsls	r2, r3, #6
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	071b      	lsls	r3, r3, #28
 8002cd4:	4956      	ldr	r1, [pc, #344]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cdc:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a53      	ldr	r2, [pc, #332]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe f874 	bl	8000dd4 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cf0:	f7fe f870 	bl	8000dd4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e092      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 8088 	bne.w	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a45      	ldr	r2, [pc, #276]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d22:	f7fe f857 	bl	8000dd4 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d2a:	f7fe f853 	bl	8000dd4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e075      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d48:	d0ef      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d120      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	019a      	lsls	r2, r3, #6
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	4927      	ldr	r1, [pc, #156]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	4920      	ldr	r1, [pc, #128]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d018      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc8:	d113      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	0e1b      	lsrs	r3, r3, #24
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	019a      	lsls	r2, r3, #6
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	431a      	orrs	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	4911      	ldr	r1, [pc, #68]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfe:	f7fd ffe9 	bl	8000dd4 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e06:	f7fd ffe5 	bl	8000dd4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	d901      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e007      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e24:	d1ef      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e040      	b.n	8002ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fe00 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fb98 	bl	80035a8 <UART_SetConfig>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fdf0 	bl	8003a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fe77 	bl	8003bb4 <UART_CheckIdleState>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d171      	bne.n	8002fcc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Transmit+0x24>
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e06a      	b.n	8002fce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f06:	f7fd ff65 	bl	8000dd4 <HAL_GetTick>
 8002f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x68>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f40:	e02c      	b.n	8002f9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fe68 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e038      	b.n	8002fce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e007      	b.n	8002f8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1cc      	bne.n	8002f42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fe35 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e005      	b.n	8002fce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b0ba      	sub	sp, #232	; 0xe8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ffe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003002:	f640 030f 	movw	r3, #2063	; 0x80f
 8003006:	4013      	ands	r3, r2
 8003008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800300c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00f      	beq.n	8003040 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8297 	beq.w	8003564 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
      }
      return;
 800303e:	e291      	b.n	8003564 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8117 	beq.w	8003278 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003056:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800305a:	4b85      	ldr	r3, [pc, #532]	; (8003270 <HAL_UART_IRQHandler+0x298>)
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 810a 	beq.w	8003278 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d011      	beq.n	8003094 <HAL_UART_IRQHandler+0xbc>
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <HAL_UART_IRQHandler+0xec>
 80030a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2202      	movs	r2, #2
 80030b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ba:	f043 0204 	orr.w	r2, r3, #4
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <HAL_UART_IRQHandler+0x11c>
 80030d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2204      	movs	r2, #4
 80030e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2208      	movs	r2, #8
 800311e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <HAL_UART_IRQHandler+0x18a>
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 81fd 	beq.w	8003568 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d04f      	beq.n	800325a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fdf7 	bl	8003dae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d141      	bne.n	8003252 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3308      	adds	r3, #8
 80031d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1d9      	bne.n	80031ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	4a13      	ldr	r2, [pc, #76]	; (8003274 <HAL_UART_IRQHandler+0x29c>)
 8003228:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f830 	bl	8001294 <HAL_DMA_Abort_IT>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d017      	beq.n	800326a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e00f      	b.n	800326a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f996 	bl	800357c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00b      	b.n	800326a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f992 	bl	800357c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e007      	b.n	800326a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f98e 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003268:	e17e      	b.n	8003568 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326a:	bf00      	nop
    return;
 800326c:	e17c      	b.n	8003568 <HAL_UART_IRQHandler+0x590>
 800326e:	bf00      	nop
 8003270:	04000120 	.word	0x04000120
 8003274:	08003e77 	.word	0x08003e77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 814c 	bne.w	800351a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8145 	beq.w	800351a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 813e 	beq.w	800351a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2210      	movs	r2, #16
 80032a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	f040 80b6 	bne.w	8003422 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8150 	beq.w	800356c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f080 8148 	bcs.w	800356c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	f000 8086 	beq.w	8003400 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800331e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003322:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800332a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1da      	bne.n	80032f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3308      	adds	r3, #8
 8003344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800334e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3308      	adds	r3, #8
 800335e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800336a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e1      	bne.n	800333e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3308      	adds	r3, #8
 8003380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800338a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800339e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e3      	bne.n	800337a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d0:	f023 0310 	bic.w	r3, r3, #16
 80033d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80033e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e4      	bne.n	80033c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd feda 	bl	80011b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003412:	b29b      	uxth	r3, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8b8 	bl	8003590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003420:	e0a4      	b.n	800356c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800342e:	b29b      	uxth	r3, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8096 	beq.w	8003570 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8091 	beq.w	8003570 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
 8003472:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e4      	bne.n	800344e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3308      	adds	r3, #8
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	623b      	str	r3, [r7, #32]
   return(result);
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034a8:	633a      	str	r2, [r7, #48]	; 0x30
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e3      	bne.n	8003484 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f023 0310 	bic.w	r3, r3, #16
 80034e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e4      	bne.n	80034d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800350c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f83c 	bl	8003590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003518:	e02a      	b.n	8003570 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00e      	beq.n	8003544 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01c      	beq.n	8003574 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
    }
    return;
 8003542:	e017      	b.n	8003574 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_UART_IRQHandler+0x59e>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fca0 	bl	8003ea2 <UART_EndTransmit_IT>
    return;
 8003562:	e008      	b.n	8003576 <HAL_UART_IRQHandler+0x59e>
      return;
 8003564:	bf00      	nop
 8003566:	e006      	b.n	8003576 <HAL_UART_IRQHandler+0x59e>
    return;
 8003568:	bf00      	nop
 800356a:	e004      	b.n	8003576 <HAL_UART_IRQHandler+0x59e>
      return;
 800356c:	bf00      	nop
 800356e:	e002      	b.n	8003576 <HAL_UART_IRQHandler+0x59e>
      return;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <HAL_UART_IRQHandler+0x59e>
    return;
 8003574:	bf00      	nop
  }

}
 8003576:	37e8      	adds	r7, #232	; 0xe8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4ba6      	ldr	r3, [pc, #664]	; (800386c <UART_SetConfig+0x2c4>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	6979      	ldr	r1, [r7, #20]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a94      	ldr	r2, [pc, #592]	; (8003870 <UART_SetConfig+0x2c8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d120      	bne.n	8003666 <UART_SetConfig+0xbe>
 8003624:	4b93      	ldr	r3, [pc, #588]	; (8003874 <UART_SetConfig+0x2cc>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b03      	cmp	r3, #3
 8003630:	d816      	bhi.n	8003660 <UART_SetConfig+0xb8>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0x90>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	08003649 	.word	0x08003649
 800363c:	08003655 	.word	0x08003655
 8003640:	0800364f 	.word	0x0800364f
 8003644:	0800365b 	.word	0x0800365b
 8003648:	2301      	movs	r3, #1
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e150      	b.n	80038f0 <UART_SetConfig+0x348>
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e14d      	b.n	80038f0 <UART_SetConfig+0x348>
 8003654:	2304      	movs	r3, #4
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e14a      	b.n	80038f0 <UART_SetConfig+0x348>
 800365a:	2308      	movs	r3, #8
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e147      	b.n	80038f0 <UART_SetConfig+0x348>
 8003660:	2310      	movs	r3, #16
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e144      	b.n	80038f0 <UART_SetConfig+0x348>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a83      	ldr	r2, [pc, #524]	; (8003878 <UART_SetConfig+0x2d0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d132      	bne.n	80036d6 <UART_SetConfig+0x12e>
 8003670:	4b80      	ldr	r3, [pc, #512]	; (8003874 <UART_SetConfig+0x2cc>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d828      	bhi.n	80036d0 <UART_SetConfig+0x128>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <UART_SetConfig+0xdc>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036d1 	.word	0x080036d1
 800368c:	080036d1 	.word	0x080036d1
 8003690:	080036d1 	.word	0x080036d1
 8003694:	080036c5 	.word	0x080036c5
 8003698:	080036d1 	.word	0x080036d1
 800369c:	080036d1 	.word	0x080036d1
 80036a0:	080036d1 	.word	0x080036d1
 80036a4:	080036bf 	.word	0x080036bf
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d1 	.word	0x080036d1
 80036b0:	080036d1 	.word	0x080036d1
 80036b4:	080036cb 	.word	0x080036cb
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e118      	b.n	80038f0 <UART_SetConfig+0x348>
 80036be:	2302      	movs	r3, #2
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e115      	b.n	80038f0 <UART_SetConfig+0x348>
 80036c4:	2304      	movs	r3, #4
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e112      	b.n	80038f0 <UART_SetConfig+0x348>
 80036ca:	2308      	movs	r3, #8
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e10f      	b.n	80038f0 <UART_SetConfig+0x348>
 80036d0:	2310      	movs	r3, #16
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e10c      	b.n	80038f0 <UART_SetConfig+0x348>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a68      	ldr	r2, [pc, #416]	; (800387c <UART_SetConfig+0x2d4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d120      	bne.n	8003722 <UART_SetConfig+0x17a>
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <UART_SetConfig+0x2cc>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036ea:	2b30      	cmp	r3, #48	; 0x30
 80036ec:	d013      	beq.n	8003716 <UART_SetConfig+0x16e>
 80036ee:	2b30      	cmp	r3, #48	; 0x30
 80036f0:	d814      	bhi.n	800371c <UART_SetConfig+0x174>
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d009      	beq.n	800370a <UART_SetConfig+0x162>
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d810      	bhi.n	800371c <UART_SetConfig+0x174>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <UART_SetConfig+0x15c>
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d006      	beq.n	8003710 <UART_SetConfig+0x168>
 8003702:	e00b      	b.n	800371c <UART_SetConfig+0x174>
 8003704:	2300      	movs	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e0f2      	b.n	80038f0 <UART_SetConfig+0x348>
 800370a:	2302      	movs	r3, #2
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e0ef      	b.n	80038f0 <UART_SetConfig+0x348>
 8003710:	2304      	movs	r3, #4
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e0ec      	b.n	80038f0 <UART_SetConfig+0x348>
 8003716:	2308      	movs	r3, #8
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e0e9      	b.n	80038f0 <UART_SetConfig+0x348>
 800371c:	2310      	movs	r3, #16
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e0e6      	b.n	80038f0 <UART_SetConfig+0x348>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a56      	ldr	r2, [pc, #344]	; (8003880 <UART_SetConfig+0x2d8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d120      	bne.n	800376e <UART_SetConfig+0x1c6>
 800372c:	4b51      	ldr	r3, [pc, #324]	; (8003874 <UART_SetConfig+0x2cc>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003736:	2bc0      	cmp	r3, #192	; 0xc0
 8003738:	d013      	beq.n	8003762 <UART_SetConfig+0x1ba>
 800373a:	2bc0      	cmp	r3, #192	; 0xc0
 800373c:	d814      	bhi.n	8003768 <UART_SetConfig+0x1c0>
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d009      	beq.n	8003756 <UART_SetConfig+0x1ae>
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d810      	bhi.n	8003768 <UART_SetConfig+0x1c0>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <UART_SetConfig+0x1a8>
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d006      	beq.n	800375c <UART_SetConfig+0x1b4>
 800374e:	e00b      	b.n	8003768 <UART_SetConfig+0x1c0>
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e0cc      	b.n	80038f0 <UART_SetConfig+0x348>
 8003756:	2302      	movs	r3, #2
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e0c9      	b.n	80038f0 <UART_SetConfig+0x348>
 800375c:	2304      	movs	r3, #4
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e0c6      	b.n	80038f0 <UART_SetConfig+0x348>
 8003762:	2308      	movs	r3, #8
 8003764:	77fb      	strb	r3, [r7, #31]
 8003766:	e0c3      	b.n	80038f0 <UART_SetConfig+0x348>
 8003768:	2310      	movs	r3, #16
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e0c0      	b.n	80038f0 <UART_SetConfig+0x348>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a44      	ldr	r2, [pc, #272]	; (8003884 <UART_SetConfig+0x2dc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d125      	bne.n	80037c4 <UART_SetConfig+0x21c>
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <UART_SetConfig+0x2cc>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003786:	d017      	beq.n	80037b8 <UART_SetConfig+0x210>
 8003788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800378c:	d817      	bhi.n	80037be <UART_SetConfig+0x216>
 800378e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003792:	d00b      	beq.n	80037ac <UART_SetConfig+0x204>
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d811      	bhi.n	80037be <UART_SetConfig+0x216>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <UART_SetConfig+0x1fe>
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	d006      	beq.n	80037b2 <UART_SetConfig+0x20a>
 80037a4:	e00b      	b.n	80037be <UART_SetConfig+0x216>
 80037a6:	2300      	movs	r3, #0
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e0a1      	b.n	80038f0 <UART_SetConfig+0x348>
 80037ac:	2302      	movs	r3, #2
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e09e      	b.n	80038f0 <UART_SetConfig+0x348>
 80037b2:	2304      	movs	r3, #4
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e09b      	b.n	80038f0 <UART_SetConfig+0x348>
 80037b8:	2308      	movs	r3, #8
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e098      	b.n	80038f0 <UART_SetConfig+0x348>
 80037be:	2310      	movs	r3, #16
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e095      	b.n	80038f0 <UART_SetConfig+0x348>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2f      	ldr	r2, [pc, #188]	; (8003888 <UART_SetConfig+0x2e0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d125      	bne.n	800381a <UART_SetConfig+0x272>
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <UART_SetConfig+0x2cc>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037dc:	d017      	beq.n	800380e <UART_SetConfig+0x266>
 80037de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e2:	d817      	bhi.n	8003814 <UART_SetConfig+0x26c>
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	d00b      	beq.n	8003802 <UART_SetConfig+0x25a>
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ee:	d811      	bhi.n	8003814 <UART_SetConfig+0x26c>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <UART_SetConfig+0x254>
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f8:	d006      	beq.n	8003808 <UART_SetConfig+0x260>
 80037fa:	e00b      	b.n	8003814 <UART_SetConfig+0x26c>
 80037fc:	2301      	movs	r3, #1
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e076      	b.n	80038f0 <UART_SetConfig+0x348>
 8003802:	2302      	movs	r3, #2
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	e073      	b.n	80038f0 <UART_SetConfig+0x348>
 8003808:	2304      	movs	r3, #4
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e070      	b.n	80038f0 <UART_SetConfig+0x348>
 800380e:	2308      	movs	r3, #8
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e06d      	b.n	80038f0 <UART_SetConfig+0x348>
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e06a      	b.n	80038f0 <UART_SetConfig+0x348>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <UART_SetConfig+0x2e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d138      	bne.n	8003896 <UART_SetConfig+0x2ee>
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <UART_SetConfig+0x2cc>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800382e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003832:	d017      	beq.n	8003864 <UART_SetConfig+0x2bc>
 8003834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003838:	d82a      	bhi.n	8003890 <UART_SetConfig+0x2e8>
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d00b      	beq.n	8003858 <UART_SetConfig+0x2b0>
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d824      	bhi.n	8003890 <UART_SetConfig+0x2e8>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <UART_SetConfig+0x2aa>
 800384a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384e:	d006      	beq.n	800385e <UART_SetConfig+0x2b6>
 8003850:	e01e      	b.n	8003890 <UART_SetConfig+0x2e8>
 8003852:	2300      	movs	r3, #0
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e04b      	b.n	80038f0 <UART_SetConfig+0x348>
 8003858:	2302      	movs	r3, #2
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e048      	b.n	80038f0 <UART_SetConfig+0x348>
 800385e:	2304      	movs	r3, #4
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e045      	b.n	80038f0 <UART_SetConfig+0x348>
 8003864:	2308      	movs	r3, #8
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e042      	b.n	80038f0 <UART_SetConfig+0x348>
 800386a:	bf00      	nop
 800386c:	efff69f3 	.word	0xefff69f3
 8003870:	40011000 	.word	0x40011000
 8003874:	40023800 	.word	0x40023800
 8003878:	40004400 	.word	0x40004400
 800387c:	40004800 	.word	0x40004800
 8003880:	40004c00 	.word	0x40004c00
 8003884:	40005000 	.word	0x40005000
 8003888:	40011400 	.word	0x40011400
 800388c:	40007800 	.word	0x40007800
 8003890:	2310      	movs	r3, #16
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e02c      	b.n	80038f0 <UART_SetConfig+0x348>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a72      	ldr	r2, [pc, #456]	; (8003a64 <UART_SetConfig+0x4bc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d125      	bne.n	80038ec <UART_SetConfig+0x344>
 80038a0:	4b71      	ldr	r3, [pc, #452]	; (8003a68 <UART_SetConfig+0x4c0>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ae:	d017      	beq.n	80038e0 <UART_SetConfig+0x338>
 80038b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038b4:	d817      	bhi.n	80038e6 <UART_SetConfig+0x33e>
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d00b      	beq.n	80038d4 <UART_SetConfig+0x32c>
 80038bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c0:	d811      	bhi.n	80038e6 <UART_SetConfig+0x33e>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <UART_SetConfig+0x326>
 80038c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ca:	d006      	beq.n	80038da <UART_SetConfig+0x332>
 80038cc:	e00b      	b.n	80038e6 <UART_SetConfig+0x33e>
 80038ce:	2300      	movs	r3, #0
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e00d      	b.n	80038f0 <UART_SetConfig+0x348>
 80038d4:	2302      	movs	r3, #2
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e00a      	b.n	80038f0 <UART_SetConfig+0x348>
 80038da:	2304      	movs	r3, #4
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e007      	b.n	80038f0 <UART_SetConfig+0x348>
 80038e0:	2308      	movs	r3, #8
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e004      	b.n	80038f0 <UART_SetConfig+0x348>
 80038e6:	2310      	movs	r3, #16
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e001      	b.n	80038f0 <UART_SetConfig+0x348>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f8:	d15b      	bne.n	80039b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80038fa:	7ffb      	ldrb	r3, [r7, #31]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d828      	bhi.n	8003952 <UART_SetConfig+0x3aa>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x360>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003935 	.word	0x08003935
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003953 	.word	0x08003953
 8003918:	08003943 	.word	0x08003943
 800391c:	08003953 	.word	0x08003953
 8003920:	08003953 	.word	0x08003953
 8003924:	08003953 	.word	0x08003953
 8003928:	0800394b 	.word	0x0800394b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7fe ff10 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8003930:	61b8      	str	r0, [r7, #24]
        break;
 8003932:	e013      	b.n	800395c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7fe ff20 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
 8003938:	61b8      	str	r0, [r7, #24]
        break;
 800393a:	e00f      	b.n	800395c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800393c:	4b4b      	ldr	r3, [pc, #300]	; (8003a6c <UART_SetConfig+0x4c4>)
 800393e:	61bb      	str	r3, [r7, #24]
        break;
 8003940:	e00c      	b.n	800395c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003942:	f7fe fdf3 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003946:	61b8      	str	r0, [r7, #24]
        break;
 8003948:	e008      	b.n	800395c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	61bb      	str	r3, [r7, #24]
        break;
 8003950:	e004      	b.n	800395c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	77bb      	strb	r3, [r7, #30]
        break;
 800395a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d074      	beq.n	8003a4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	005a      	lsls	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d916      	bls.n	80039ac <UART_SetConfig+0x404>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d212      	bcs.n	80039ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f023 030f 	bic.w	r3, r3, #15
 800398e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	b29b      	uxth	r3, r3
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	b29a      	uxth	r2, r3
 800399c:	89fb      	ldrh	r3, [r7, #14]
 800399e:	4313      	orrs	r3, r2
 80039a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	89fa      	ldrh	r2, [r7, #14]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	e04f      	b.n	8003a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	77bb      	strb	r3, [r7, #30]
 80039b0:	e04c      	b.n	8003a4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b2:	7ffb      	ldrb	r3, [r7, #31]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d828      	bhi.n	8003a0a <UART_SetConfig+0x462>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <UART_SetConfig+0x418>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039ed 	.word	0x080039ed
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a0b 	.word	0x08003a0b
 80039d0:	080039fb 	.word	0x080039fb
 80039d4:	08003a0b 	.word	0x08003a0b
 80039d8:	08003a0b 	.word	0x08003a0b
 80039dc:	08003a0b 	.word	0x08003a0b
 80039e0:	08003a03 	.word	0x08003a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7fe feb4 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 80039e8:	61b8      	str	r0, [r7, #24]
        break;
 80039ea:	e013      	b.n	8003a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7fe fec4 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
 80039f0:	61b8      	str	r0, [r7, #24]
        break;
 80039f2:	e00f      	b.n	8003a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <UART_SetConfig+0x4c4>)
 80039f6:	61bb      	str	r3, [r7, #24]
        break;
 80039f8:	e00c      	b.n	8003a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fa:	f7fe fd97 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80039fe:	61b8      	str	r0, [r7, #24]
        break;
 8003a00:	e008      	b.n	8003a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e004      	b.n	8003a14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	77bb      	strb	r3, [r7, #30]
        break;
 8003a12:	bf00      	nop
    }

    if (pclk != 0U)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d018      	beq.n	8003a4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	085a      	lsrs	r2, r3, #1
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	441a      	add	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b0f      	cmp	r3, #15
 8003a32:	d909      	bls.n	8003a48 <UART_SetConfig+0x4a0>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3a:	d205      	bcs.n	8003a48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	e001      	b.n	8003a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40007c00 	.word	0x40007c00
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	00f42400 	.word	0x00f42400

08003a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01a      	beq.n	8003b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6e:	d10a      	bne.n	8003b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc4:	f7fd f906 	bl	8000dd4 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d10e      	bne.n	8003bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f81b 	bl	8003c22 <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e011      	b.n	8003c1a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b09c      	sub	sp, #112	; 0x70
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c32:	e0a7      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	f000 80a3 	beq.w	8003d84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fd f8c9 	bl	8000dd4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13f      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c68:	667b      	str	r3, [r7, #100]	; 0x64
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e6      	bne.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ca6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e068      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d050      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf0:	d148      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d4e:	623a      	str	r2, [r7, #32]
 8003d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	69f9      	ldr	r1, [r7, #28]
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e010      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	f43f af48 	beq.w	8003c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3770      	adds	r7, #112	; 0x70
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b095      	sub	sp, #84	; 0x54
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d118      	bne.n	8003e56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e6      	bne.n	8003e24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e6a:	bf00      	nop
 8003e6c:	3754      	adds	r7, #84	; 0x54
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fb71 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6979      	ldr	r1, [r7, #20]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7fc fccd 	bl	8000888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eee:	bf00      	nop
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef8:	b084      	sub	sp, #16
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	f107 001c 	add.w	r0, r7, #28
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d126      	bne.n	8003f5e <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	4b38      	ldr	r3, [pc, #224]	; (8004004 <USB_CoreInit+0x10c>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fad0 	bl	80044f8 <USB_CoreReset>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e03a      	b.n	8003fd4 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d126      	bne.n	8003fb2 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	4b23      	ldr	r3, [pc, #140]	; (8004004 <USB_CoreInit+0x10c>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f023 0210 	bic.w	r2, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8003f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d105      	bne.n	8003fa6 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 faa6 	bl	80044f8 <USB_CoreReset>
 8003fac:	4603      	mov	r3, r0
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e010      	b.n	8003fd4 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa9a 	bl	80044f8 <USB_CoreReset>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10b      	bne.n	8003ff2 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f043 0206 	orr.w	r2, r3, #6
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ffe:	b004      	add	sp, #16
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	ffbdffbf 	.word	0xffbdffbf

08004008 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 0201 	bic.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d115      	bne.n	8004078 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004058:	2001      	movs	r0, #1
 800405a:	f7fc fec7 	bl	8000dec <HAL_Delay>
      ms++;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fa39 	bl	80044dc <USB_GetMode>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d01e      	beq.n	80040ae <USB_SetCurrentMode+0x84>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b31      	cmp	r3, #49	; 0x31
 8004074:	d9f0      	bls.n	8004058 <USB_SetCurrentMode+0x2e>
 8004076:	e01a      	b.n	80040ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d115      	bne.n	80040aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800408a:	2001      	movs	r0, #1
 800408c:	f7fc feae 	bl	8000dec <HAL_Delay>
      ms++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa20 	bl	80044dc <USB_GetMode>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <USB_SetCurrentMode+0x84>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b31      	cmp	r3, #49	; 0x31
 80040a6:	d9f0      	bls.n	800408a <USB_SetCurrentMode+0x60>
 80040a8:	e001      	b.n	80040ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e005      	b.n	80040ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b32      	cmp	r3, #50	; 0x32
 80040b2:	d101      	bne.n	80040b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c4:	b084      	sub	sp, #16
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	e009      	b.n	80040f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	2200      	movs	r2, #0
 80040f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3301      	adds	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0e      	cmp	r3, #14
 80040fc:	d9f2      	bls.n	80040e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11c      	bne.n	800413e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e005      	b.n	800414a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415c:	4619      	mov	r1, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	461a      	mov	r2, r3
 8004166:	680b      	ldr	r3, [r1, #0]
 8004168:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10c      	bne.n	800418a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004176:	2100      	movs	r1, #0
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f975 	bl	8004468 <USB_SetDevSpeed>
 800417e:	e018      	b.n	80041b2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004180:	2101      	movs	r1, #1
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f970 	bl	8004468 <USB_SetDevSpeed>
 8004188:	e013      	b.n	80041b2 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b03      	cmp	r3, #3
 800418e:	d10c      	bne.n	80041aa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004196:	2100      	movs	r1, #0
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f965 	bl	8004468 <USB_SetDevSpeed>
 800419e:	e008      	b.n	80041b2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041a0:	2101      	movs	r1, #1
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f960 	bl	8004468 <USB_SetDevSpeed>
 80041a8:	e003      	b.n	80041b2 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041aa:	2103      	movs	r1, #3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f95b 	bl	8004468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041b2:	2110      	movs	r1, #16
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8f3 	bl	80043a0 <USB_FlushTxFifo>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f91f 	bl	8004408 <USB_FlushRxFifo>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	461a      	mov	r2, r3
 80041e8:	2300      	movs	r3, #0
 80041ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e043      	b.n	8004286 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004214:	d118      	bne.n	8004248 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e013      	b.n	800425a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423e:	461a      	mov	r2, r3
 8004240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e008      	b.n	800425a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	461a      	mov	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	461a      	mov	r2, r3
 8004268:	2300      	movs	r3, #0
 800426a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	461a      	mov	r2, r3
 800427a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800427e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3301      	adds	r3, #1
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3b7      	bcc.n	80041fe <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e043      	b.n	800431c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042aa:	d118      	bne.n	80042de <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e013      	b.n	80042f0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	461a      	mov	r2, r3
 80042d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e008      	b.n	80042f0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	461a      	mov	r2, r3
 80042ec:	2300      	movs	r3, #0
 80042ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	461a      	mov	r2, r3
 8004310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3301      	adds	r3, #1
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d3b7      	bcc.n	8004294 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004336:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <USB_DevInit+0x2d4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f043 0208 	orr.w	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <USB_DevInit+0x2d8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004394:	b004      	add	sp, #16
 8004396:	4770      	bx	lr
 8004398:	803c3800 	.word	0x803c3800
 800439c:	40000004 	.word	0x40000004

080043a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3301      	adds	r3, #1
 80043b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a13      	ldr	r2, [pc, #76]	; (8004404 <USB_FlushTxFifo+0x64>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e01b      	b.n	80043f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	daf2      	bge.n	80043ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	019b      	lsls	r3, r3, #6
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <USB_FlushTxFifo+0x64>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e006      	b.n	80043f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d0f0      	beq.n	80043d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	00030d40 	.word	0x00030d40

08004408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a11      	ldr	r2, [pc, #68]	; (8004464 <USB_FlushRxFifo+0x5c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e018      	b.n	8004458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	daf2      	bge.n	8004414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2210      	movs	r2, #16
 8004436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a08      	ldr	r2, [pc, #32]	; (8004464 <USB_FlushRxFifo+0x5c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e006      	b.n	8004458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d0f0      	beq.n	8004438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	00030d40 	.word	0x00030d40

08004468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044b4:	f023 0303 	bic.w	r3, r3, #3
 80044b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c8:	f043 0302 	orr.w	r3, r3, #2
 80044cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0301 	and.w	r3, r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <USB_CoreReset+0x64>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e01b      	b.n	800454e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	daf2      	bge.n	8004504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <USB_CoreReset+0x64>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e006      	b.n	800454e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	d0f0      	beq.n	800452e <USB_CoreReset+0x36>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	00030d40 	.word	0x00030d40

08004560 <__errno>:
 8004560:	4b01      	ldr	r3, [pc, #4]	; (8004568 <__errno+0x8>)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	2000000c 	.word	0x2000000c

0800456c <__libc_init_array>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	4d0d      	ldr	r5, [pc, #52]	; (80045a4 <__libc_init_array+0x38>)
 8004570:	4c0d      	ldr	r4, [pc, #52]	; (80045a8 <__libc_init_array+0x3c>)
 8004572:	1b64      	subs	r4, r4, r5
 8004574:	10a4      	asrs	r4, r4, #2
 8004576:	2600      	movs	r6, #0
 8004578:	42a6      	cmp	r6, r4
 800457a:	d109      	bne.n	8004590 <__libc_init_array+0x24>
 800457c:	4d0b      	ldr	r5, [pc, #44]	; (80045ac <__libc_init_array+0x40>)
 800457e:	4c0c      	ldr	r4, [pc, #48]	; (80045b0 <__libc_init_array+0x44>)
 8004580:	f000 fc8e 	bl	8004ea0 <_init>
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	2600      	movs	r6, #0
 800458a:	42a6      	cmp	r6, r4
 800458c:	d105      	bne.n	800459a <__libc_init_array+0x2e>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	f855 3b04 	ldr.w	r3, [r5], #4
 8004594:	4798      	blx	r3
 8004596:	3601      	adds	r6, #1
 8004598:	e7ee      	b.n	8004578 <__libc_init_array+0xc>
 800459a:	f855 3b04 	ldr.w	r3, [r5], #4
 800459e:	4798      	blx	r3
 80045a0:	3601      	adds	r6, #1
 80045a2:	e7f2      	b.n	800458a <__libc_init_array+0x1e>
 80045a4:	08004f20 	.word	0x08004f20
 80045a8:	08004f20 	.word	0x08004f20
 80045ac:	08004f20 	.word	0x08004f20
 80045b0:	08004f24 	.word	0x08004f24

080045b4 <memset>:
 80045b4:	4402      	add	r2, r0
 80045b6:	4603      	mov	r3, r0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <memset+0xa>
 80045bc:	4770      	bx	lr
 80045be:	f803 1b01 	strb.w	r1, [r3], #1
 80045c2:	e7f9      	b.n	80045b8 <memset+0x4>

080045c4 <siprintf>:
 80045c4:	b40e      	push	{r1, r2, r3}
 80045c6:	b500      	push	{lr}
 80045c8:	b09c      	sub	sp, #112	; 0x70
 80045ca:	ab1d      	add	r3, sp, #116	; 0x74
 80045cc:	9002      	str	r0, [sp, #8]
 80045ce:	9006      	str	r0, [sp, #24]
 80045d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045d4:	4809      	ldr	r0, [pc, #36]	; (80045fc <siprintf+0x38>)
 80045d6:	9107      	str	r1, [sp, #28]
 80045d8:	9104      	str	r1, [sp, #16]
 80045da:	4909      	ldr	r1, [pc, #36]	; (8004600 <siprintf+0x3c>)
 80045dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e0:	9105      	str	r1, [sp, #20]
 80045e2:	6800      	ldr	r0, [r0, #0]
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	a902      	add	r1, sp, #8
 80045e8:	f000 f868 	bl	80046bc <_svfiprintf_r>
 80045ec:	9b02      	ldr	r3, [sp, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	b01c      	add	sp, #112	; 0x70
 80045f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f8:	b003      	add	sp, #12
 80045fa:	4770      	bx	lr
 80045fc:	2000000c 	.word	0x2000000c
 8004600:	ffff0208 	.word	0xffff0208

08004604 <__ssputs_r>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	688e      	ldr	r6, [r1, #8]
 800460a:	429e      	cmp	r6, r3
 800460c:	4682      	mov	sl, r0
 800460e:	460c      	mov	r4, r1
 8004610:	4690      	mov	r8, r2
 8004612:	461f      	mov	r7, r3
 8004614:	d838      	bhi.n	8004688 <__ssputs_r+0x84>
 8004616:	898a      	ldrh	r2, [r1, #12]
 8004618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800461c:	d032      	beq.n	8004684 <__ssputs_r+0x80>
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	6909      	ldr	r1, [r1, #16]
 8004622:	eba5 0901 	sub.w	r9, r5, r1
 8004626:	6965      	ldr	r5, [r4, #20]
 8004628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800462c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004630:	3301      	adds	r3, #1
 8004632:	444b      	add	r3, r9
 8004634:	106d      	asrs	r5, r5, #1
 8004636:	429d      	cmp	r5, r3
 8004638:	bf38      	it	cc
 800463a:	461d      	movcc	r5, r3
 800463c:	0553      	lsls	r3, r2, #21
 800463e:	d531      	bpl.n	80046a4 <__ssputs_r+0xa0>
 8004640:	4629      	mov	r1, r5
 8004642:	f000 fb63 	bl	8004d0c <_malloc_r>
 8004646:	4606      	mov	r6, r0
 8004648:	b950      	cbnz	r0, 8004660 <__ssputs_r+0x5c>
 800464a:	230c      	movs	r3, #12
 800464c:	f8ca 3000 	str.w	r3, [sl]
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004660:	6921      	ldr	r1, [r4, #16]
 8004662:	464a      	mov	r2, r9
 8004664:	f000 fabe 	bl	8004be4 <memcpy>
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800466e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	6126      	str	r6, [r4, #16]
 8004676:	6165      	str	r5, [r4, #20]
 8004678:	444e      	add	r6, r9
 800467a:	eba5 0509 	sub.w	r5, r5, r9
 800467e:	6026      	str	r6, [r4, #0]
 8004680:	60a5      	str	r5, [r4, #8]
 8004682:	463e      	mov	r6, r7
 8004684:	42be      	cmp	r6, r7
 8004686:	d900      	bls.n	800468a <__ssputs_r+0x86>
 8004688:	463e      	mov	r6, r7
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	4632      	mov	r2, r6
 800468e:	4641      	mov	r1, r8
 8004690:	f000 fab6 	bl	8004c00 <memmove>
 8004694:	68a3      	ldr	r3, [r4, #8]
 8004696:	1b9b      	subs	r3, r3, r6
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	4433      	add	r3, r6
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	2000      	movs	r0, #0
 80046a2:	e7db      	b.n	800465c <__ssputs_r+0x58>
 80046a4:	462a      	mov	r2, r5
 80046a6:	f000 fba5 	bl	8004df4 <_realloc_r>
 80046aa:	4606      	mov	r6, r0
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d1e1      	bne.n	8004674 <__ssputs_r+0x70>
 80046b0:	6921      	ldr	r1, [r4, #16]
 80046b2:	4650      	mov	r0, sl
 80046b4:	f000 fabe 	bl	8004c34 <_free_r>
 80046b8:	e7c7      	b.n	800464a <__ssputs_r+0x46>
	...

080046bc <_svfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	4698      	mov	r8, r3
 80046c2:	898b      	ldrh	r3, [r1, #12]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	b09d      	sub	sp, #116	; 0x74
 80046c8:	4607      	mov	r7, r0
 80046ca:	460d      	mov	r5, r1
 80046cc:	4614      	mov	r4, r2
 80046ce:	d50e      	bpl.n	80046ee <_svfiprintf_r+0x32>
 80046d0:	690b      	ldr	r3, [r1, #16]
 80046d2:	b963      	cbnz	r3, 80046ee <_svfiprintf_r+0x32>
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	f000 fb19 	bl	8004d0c <_malloc_r>
 80046da:	6028      	str	r0, [r5, #0]
 80046dc:	6128      	str	r0, [r5, #16]
 80046de:	b920      	cbnz	r0, 80046ea <_svfiprintf_r+0x2e>
 80046e0:	230c      	movs	r3, #12
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	e0d1      	b.n	800488e <_svfiprintf_r+0x1d2>
 80046ea:	2340      	movs	r3, #64	; 0x40
 80046ec:	616b      	str	r3, [r5, #20]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9309      	str	r3, [sp, #36]	; 0x24
 80046f2:	2320      	movs	r3, #32
 80046f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046fc:	2330      	movs	r3, #48	; 0x30
 80046fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048a8 <_svfiprintf_r+0x1ec>
 8004702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004706:	f04f 0901 	mov.w	r9, #1
 800470a:	4623      	mov	r3, r4
 800470c:	469a      	mov	sl, r3
 800470e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004712:	b10a      	cbz	r2, 8004718 <_svfiprintf_r+0x5c>
 8004714:	2a25      	cmp	r2, #37	; 0x25
 8004716:	d1f9      	bne.n	800470c <_svfiprintf_r+0x50>
 8004718:	ebba 0b04 	subs.w	fp, sl, r4
 800471c:	d00b      	beq.n	8004736 <_svfiprintf_r+0x7a>
 800471e:	465b      	mov	r3, fp
 8004720:	4622      	mov	r2, r4
 8004722:	4629      	mov	r1, r5
 8004724:	4638      	mov	r0, r7
 8004726:	f7ff ff6d 	bl	8004604 <__ssputs_r>
 800472a:	3001      	adds	r0, #1
 800472c:	f000 80aa 	beq.w	8004884 <_svfiprintf_r+0x1c8>
 8004730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004732:	445a      	add	r2, fp
 8004734:	9209      	str	r2, [sp, #36]	; 0x24
 8004736:	f89a 3000 	ldrb.w	r3, [sl]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80a2 	beq.w	8004884 <_svfiprintf_r+0x1c8>
 8004740:	2300      	movs	r3, #0
 8004742:	f04f 32ff 	mov.w	r2, #4294967295
 8004746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474a:	f10a 0a01 	add.w	sl, sl, #1
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	9307      	str	r3, [sp, #28]
 8004752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004756:	931a      	str	r3, [sp, #104]	; 0x68
 8004758:	4654      	mov	r4, sl
 800475a:	2205      	movs	r2, #5
 800475c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004760:	4851      	ldr	r0, [pc, #324]	; (80048a8 <_svfiprintf_r+0x1ec>)
 8004762:	f7fb fd5d 	bl	8000220 <memchr>
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	b9d8      	cbnz	r0, 80047a2 <_svfiprintf_r+0xe6>
 800476a:	06d0      	lsls	r0, r2, #27
 800476c:	bf44      	itt	mi
 800476e:	2320      	movmi	r3, #32
 8004770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004774:	0711      	lsls	r1, r2, #28
 8004776:	bf44      	itt	mi
 8004778:	232b      	movmi	r3, #43	; 0x2b
 800477a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477e:	f89a 3000 	ldrb.w	r3, [sl]
 8004782:	2b2a      	cmp	r3, #42	; 0x2a
 8004784:	d015      	beq.n	80047b2 <_svfiprintf_r+0xf6>
 8004786:	9a07      	ldr	r2, [sp, #28]
 8004788:	4654      	mov	r4, sl
 800478a:	2000      	movs	r0, #0
 800478c:	f04f 0c0a 	mov.w	ip, #10
 8004790:	4621      	mov	r1, r4
 8004792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004796:	3b30      	subs	r3, #48	; 0x30
 8004798:	2b09      	cmp	r3, #9
 800479a:	d94e      	bls.n	800483a <_svfiprintf_r+0x17e>
 800479c:	b1b0      	cbz	r0, 80047cc <_svfiprintf_r+0x110>
 800479e:	9207      	str	r2, [sp, #28]
 80047a0:	e014      	b.n	80047cc <_svfiprintf_r+0x110>
 80047a2:	eba0 0308 	sub.w	r3, r0, r8
 80047a6:	fa09 f303 	lsl.w	r3, r9, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	46a2      	mov	sl, r4
 80047b0:	e7d2      	b.n	8004758 <_svfiprintf_r+0x9c>
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	9103      	str	r1, [sp, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bfbb      	ittet	lt
 80047be:	425b      	neglt	r3, r3
 80047c0:	f042 0202 	orrlt.w	r2, r2, #2
 80047c4:	9307      	strge	r3, [sp, #28]
 80047c6:	9307      	strlt	r3, [sp, #28]
 80047c8:	bfb8      	it	lt
 80047ca:	9204      	strlt	r2, [sp, #16]
 80047cc:	7823      	ldrb	r3, [r4, #0]
 80047ce:	2b2e      	cmp	r3, #46	; 0x2e
 80047d0:	d10c      	bne.n	80047ec <_svfiprintf_r+0x130>
 80047d2:	7863      	ldrb	r3, [r4, #1]
 80047d4:	2b2a      	cmp	r3, #42	; 0x2a
 80047d6:	d135      	bne.n	8004844 <_svfiprintf_r+0x188>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	9203      	str	r2, [sp, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bfb8      	it	lt
 80047e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047e8:	3402      	adds	r4, #2
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048b8 <_svfiprintf_r+0x1fc>
 80047f0:	7821      	ldrb	r1, [r4, #0]
 80047f2:	2203      	movs	r2, #3
 80047f4:	4650      	mov	r0, sl
 80047f6:	f7fb fd13 	bl	8000220 <memchr>
 80047fa:	b140      	cbz	r0, 800480e <_svfiprintf_r+0x152>
 80047fc:	2340      	movs	r3, #64	; 0x40
 80047fe:	eba0 000a 	sub.w	r0, r0, sl
 8004802:	fa03 f000 	lsl.w	r0, r3, r0
 8004806:	9b04      	ldr	r3, [sp, #16]
 8004808:	4303      	orrs	r3, r0
 800480a:	3401      	adds	r4, #1
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004812:	4826      	ldr	r0, [pc, #152]	; (80048ac <_svfiprintf_r+0x1f0>)
 8004814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004818:	2206      	movs	r2, #6
 800481a:	f7fb fd01 	bl	8000220 <memchr>
 800481e:	2800      	cmp	r0, #0
 8004820:	d038      	beq.n	8004894 <_svfiprintf_r+0x1d8>
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <_svfiprintf_r+0x1f4>)
 8004824:	bb1b      	cbnz	r3, 800486e <_svfiprintf_r+0x1b2>
 8004826:	9b03      	ldr	r3, [sp, #12]
 8004828:	3307      	adds	r3, #7
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	3308      	adds	r3, #8
 8004830:	9303      	str	r3, [sp, #12]
 8004832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004834:	4433      	add	r3, r6
 8004836:	9309      	str	r3, [sp, #36]	; 0x24
 8004838:	e767      	b.n	800470a <_svfiprintf_r+0x4e>
 800483a:	fb0c 3202 	mla	r2, ip, r2, r3
 800483e:	460c      	mov	r4, r1
 8004840:	2001      	movs	r0, #1
 8004842:	e7a5      	b.n	8004790 <_svfiprintf_r+0xd4>
 8004844:	2300      	movs	r3, #0
 8004846:	3401      	adds	r4, #1
 8004848:	9305      	str	r3, [sp, #20]
 800484a:	4619      	mov	r1, r3
 800484c:	f04f 0c0a 	mov.w	ip, #10
 8004850:	4620      	mov	r0, r4
 8004852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004856:	3a30      	subs	r2, #48	; 0x30
 8004858:	2a09      	cmp	r2, #9
 800485a:	d903      	bls.n	8004864 <_svfiprintf_r+0x1a8>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0c5      	beq.n	80047ec <_svfiprintf_r+0x130>
 8004860:	9105      	str	r1, [sp, #20]
 8004862:	e7c3      	b.n	80047ec <_svfiprintf_r+0x130>
 8004864:	fb0c 2101 	mla	r1, ip, r1, r2
 8004868:	4604      	mov	r4, r0
 800486a:	2301      	movs	r3, #1
 800486c:	e7f0      	b.n	8004850 <_svfiprintf_r+0x194>
 800486e:	ab03      	add	r3, sp, #12
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	462a      	mov	r2, r5
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <_svfiprintf_r+0x1f8>)
 8004876:	a904      	add	r1, sp, #16
 8004878:	4638      	mov	r0, r7
 800487a:	f3af 8000 	nop.w
 800487e:	1c42      	adds	r2, r0, #1
 8004880:	4606      	mov	r6, r0
 8004882:	d1d6      	bne.n	8004832 <_svfiprintf_r+0x176>
 8004884:	89ab      	ldrh	r3, [r5, #12]
 8004886:	065b      	lsls	r3, r3, #25
 8004888:	f53f af2c 	bmi.w	80046e4 <_svfiprintf_r+0x28>
 800488c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800488e:	b01d      	add	sp, #116	; 0x74
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004894:	ab03      	add	r3, sp, #12
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	462a      	mov	r2, r5
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <_svfiprintf_r+0x1f8>)
 800489c:	a904      	add	r1, sp, #16
 800489e:	4638      	mov	r0, r7
 80048a0:	f000 f87a 	bl	8004998 <_printf_i>
 80048a4:	e7eb      	b.n	800487e <_svfiprintf_r+0x1c2>
 80048a6:	bf00      	nop
 80048a8:	08004ee4 	.word	0x08004ee4
 80048ac:	08004eee 	.word	0x08004eee
 80048b0:	00000000 	.word	0x00000000
 80048b4:	08004605 	.word	0x08004605
 80048b8:	08004eea 	.word	0x08004eea

080048bc <_printf_common>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	4616      	mov	r6, r2
 80048c2:	4699      	mov	r9, r3
 80048c4:	688a      	ldr	r2, [r1, #8]
 80048c6:	690b      	ldr	r3, [r1, #16]
 80048c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	bfb8      	it	lt
 80048d0:	4613      	movlt	r3, r2
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048d8:	4607      	mov	r7, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	b10a      	cbz	r2, 80048e2 <_printf_common+0x26>
 80048de:	3301      	adds	r3, #1
 80048e0:	6033      	str	r3, [r6, #0]
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	0699      	lsls	r1, r3, #26
 80048e6:	bf42      	ittt	mi
 80048e8:	6833      	ldrmi	r3, [r6, #0]
 80048ea:	3302      	addmi	r3, #2
 80048ec:	6033      	strmi	r3, [r6, #0]
 80048ee:	6825      	ldr	r5, [r4, #0]
 80048f0:	f015 0506 	ands.w	r5, r5, #6
 80048f4:	d106      	bne.n	8004904 <_printf_common+0x48>
 80048f6:	f104 0a19 	add.w	sl, r4, #25
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	6832      	ldr	r2, [r6, #0]
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	42ab      	cmp	r3, r5
 8004902:	dc26      	bgt.n	8004952 <_printf_common+0x96>
 8004904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004908:	1e13      	subs	r3, r2, #0
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	bf18      	it	ne
 800490e:	2301      	movne	r3, #1
 8004910:	0692      	lsls	r2, r2, #26
 8004912:	d42b      	bmi.n	800496c <_printf_common+0xb0>
 8004914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004918:	4649      	mov	r1, r9
 800491a:	4638      	mov	r0, r7
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d01e      	beq.n	8004960 <_printf_common+0xa4>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	68e5      	ldr	r5, [r4, #12]
 8004926:	6832      	ldr	r2, [r6, #0]
 8004928:	f003 0306 	and.w	r3, r3, #6
 800492c:	2b04      	cmp	r3, #4
 800492e:	bf08      	it	eq
 8004930:	1aad      	subeq	r5, r5, r2
 8004932:	68a3      	ldr	r3, [r4, #8]
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	bf0c      	ite	eq
 8004938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800493c:	2500      	movne	r5, #0
 800493e:	4293      	cmp	r3, r2
 8004940:	bfc4      	itt	gt
 8004942:	1a9b      	subgt	r3, r3, r2
 8004944:	18ed      	addgt	r5, r5, r3
 8004946:	2600      	movs	r6, #0
 8004948:	341a      	adds	r4, #26
 800494a:	42b5      	cmp	r5, r6
 800494c:	d11a      	bne.n	8004984 <_printf_common+0xc8>
 800494e:	2000      	movs	r0, #0
 8004950:	e008      	b.n	8004964 <_printf_common+0xa8>
 8004952:	2301      	movs	r3, #1
 8004954:	4652      	mov	r2, sl
 8004956:	4649      	mov	r1, r9
 8004958:	4638      	mov	r0, r7
 800495a:	47c0      	blx	r8
 800495c:	3001      	adds	r0, #1
 800495e:	d103      	bne.n	8004968 <_printf_common+0xac>
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	3501      	adds	r5, #1
 800496a:	e7c6      	b.n	80048fa <_printf_common+0x3e>
 800496c:	18e1      	adds	r1, r4, r3
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	2030      	movs	r0, #48	; 0x30
 8004972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004976:	4422      	add	r2, r4
 8004978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800497c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004980:	3302      	adds	r3, #2
 8004982:	e7c7      	b.n	8004914 <_printf_common+0x58>
 8004984:	2301      	movs	r3, #1
 8004986:	4622      	mov	r2, r4
 8004988:	4649      	mov	r1, r9
 800498a:	4638      	mov	r0, r7
 800498c:	47c0      	blx	r8
 800498e:	3001      	adds	r0, #1
 8004990:	d0e6      	beq.n	8004960 <_printf_common+0xa4>
 8004992:	3601      	adds	r6, #1
 8004994:	e7d9      	b.n	800494a <_printf_common+0x8e>
	...

08004998 <_printf_i>:
 8004998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800499c:	7e0f      	ldrb	r7, [r1, #24]
 800499e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049a0:	2f78      	cmp	r7, #120	; 0x78
 80049a2:	4691      	mov	r9, r2
 80049a4:	4680      	mov	r8, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	469a      	mov	sl, r3
 80049aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ae:	d807      	bhi.n	80049c0 <_printf_i+0x28>
 80049b0:	2f62      	cmp	r7, #98	; 0x62
 80049b2:	d80a      	bhi.n	80049ca <_printf_i+0x32>
 80049b4:	2f00      	cmp	r7, #0
 80049b6:	f000 80d8 	beq.w	8004b6a <_printf_i+0x1d2>
 80049ba:	2f58      	cmp	r7, #88	; 0x58
 80049bc:	f000 80a3 	beq.w	8004b06 <_printf_i+0x16e>
 80049c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049c8:	e03a      	b.n	8004a40 <_printf_i+0xa8>
 80049ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ce:	2b15      	cmp	r3, #21
 80049d0:	d8f6      	bhi.n	80049c0 <_printf_i+0x28>
 80049d2:	a101      	add	r1, pc, #4	; (adr r1, 80049d8 <_printf_i+0x40>)
 80049d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d8:	08004a31 	.word	0x08004a31
 80049dc:	08004a45 	.word	0x08004a45
 80049e0:	080049c1 	.word	0x080049c1
 80049e4:	080049c1 	.word	0x080049c1
 80049e8:	080049c1 	.word	0x080049c1
 80049ec:	080049c1 	.word	0x080049c1
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	080049c1 	.word	0x080049c1
 80049f8:	080049c1 	.word	0x080049c1
 80049fc:	080049c1 	.word	0x080049c1
 8004a00:	080049c1 	.word	0x080049c1
 8004a04:	08004b51 	.word	0x08004b51
 8004a08:	08004a75 	.word	0x08004a75
 8004a0c:	08004b33 	.word	0x08004b33
 8004a10:	080049c1 	.word	0x080049c1
 8004a14:	080049c1 	.word	0x080049c1
 8004a18:	08004b73 	.word	0x08004b73
 8004a1c:	080049c1 	.word	0x080049c1
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	080049c1 	.word	0x080049c1
 8004a28:	080049c1 	.word	0x080049c1
 8004a2c:	08004b3b 	.word	0x08004b3b
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	602a      	str	r2, [r5, #0]
 8004a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0a3      	b.n	8004b8c <_printf_i+0x1f4>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	6829      	ldr	r1, [r5, #0]
 8004a48:	0606      	lsls	r6, r0, #24
 8004a4a:	f101 0304 	add.w	r3, r1, #4
 8004a4e:	d50a      	bpl.n	8004a66 <_printf_i+0xce>
 8004a50:	680e      	ldr	r6, [r1, #0]
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	da03      	bge.n	8004a60 <_printf_i+0xc8>
 8004a58:	232d      	movs	r3, #45	; 0x2d
 8004a5a:	4276      	negs	r6, r6
 8004a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a60:	485e      	ldr	r0, [pc, #376]	; (8004bdc <_printf_i+0x244>)
 8004a62:	230a      	movs	r3, #10
 8004a64:	e019      	b.n	8004a9a <_printf_i+0x102>
 8004a66:	680e      	ldr	r6, [r1, #0]
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a6e:	bf18      	it	ne
 8004a70:	b236      	sxthne	r6, r6
 8004a72:	e7ef      	b.n	8004a54 <_printf_i+0xbc>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	6820      	ldr	r0, [r4, #0]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	6029      	str	r1, [r5, #0]
 8004a7c:	0601      	lsls	r1, r0, #24
 8004a7e:	d501      	bpl.n	8004a84 <_printf_i+0xec>
 8004a80:	681e      	ldr	r6, [r3, #0]
 8004a82:	e002      	b.n	8004a8a <_printf_i+0xf2>
 8004a84:	0646      	lsls	r6, r0, #25
 8004a86:	d5fb      	bpl.n	8004a80 <_printf_i+0xe8>
 8004a88:	881e      	ldrh	r6, [r3, #0]
 8004a8a:	4854      	ldr	r0, [pc, #336]	; (8004bdc <_printf_i+0x244>)
 8004a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a8e:	bf0c      	ite	eq
 8004a90:	2308      	moveq	r3, #8
 8004a92:	230a      	movne	r3, #10
 8004a94:	2100      	movs	r1, #0
 8004a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a9a:	6865      	ldr	r5, [r4, #4]
 8004a9c:	60a5      	str	r5, [r4, #8]
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	bfa2      	ittt	ge
 8004aa2:	6821      	ldrge	r1, [r4, #0]
 8004aa4:	f021 0104 	bicge.w	r1, r1, #4
 8004aa8:	6021      	strge	r1, [r4, #0]
 8004aaa:	b90e      	cbnz	r6, 8004ab0 <_printf_i+0x118>
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	d04d      	beq.n	8004b4c <_printf_i+0x1b4>
 8004ab0:	4615      	mov	r5, r2
 8004ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8004aba:	5dc7      	ldrb	r7, [r0, r7]
 8004abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ac0:	4637      	mov	r7, r6
 8004ac2:	42bb      	cmp	r3, r7
 8004ac4:	460e      	mov	r6, r1
 8004ac6:	d9f4      	bls.n	8004ab2 <_printf_i+0x11a>
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d10b      	bne.n	8004ae4 <_printf_i+0x14c>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	07de      	lsls	r6, r3, #31
 8004ad0:	d508      	bpl.n	8004ae4 <_printf_i+0x14c>
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	6861      	ldr	r1, [r4, #4]
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	bfde      	ittt	le
 8004ada:	2330      	movle	r3, #48	; 0x30
 8004adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ae4:	1b52      	subs	r2, r2, r5
 8004ae6:	6122      	str	r2, [r4, #16]
 8004ae8:	f8cd a000 	str.w	sl, [sp]
 8004aec:	464b      	mov	r3, r9
 8004aee:	aa03      	add	r2, sp, #12
 8004af0:	4621      	mov	r1, r4
 8004af2:	4640      	mov	r0, r8
 8004af4:	f7ff fee2 	bl	80048bc <_printf_common>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d14c      	bne.n	8004b96 <_printf_i+0x1fe>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	b004      	add	sp, #16
 8004b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b06:	4835      	ldr	r0, [pc, #212]	; (8004bdc <_printf_i+0x244>)
 8004b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b0c:	6829      	ldr	r1, [r5, #0]
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b14:	6029      	str	r1, [r5, #0]
 8004b16:	061d      	lsls	r5, r3, #24
 8004b18:	d514      	bpl.n	8004b44 <_printf_i+0x1ac>
 8004b1a:	07df      	lsls	r7, r3, #31
 8004b1c:	bf44      	itt	mi
 8004b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b22:	6023      	strmi	r3, [r4, #0]
 8004b24:	b91e      	cbnz	r6, 8004b2e <_printf_i+0x196>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f023 0320 	bic.w	r3, r3, #32
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	2310      	movs	r3, #16
 8004b30:	e7b0      	b.n	8004a94 <_printf_i+0xfc>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f043 0320 	orr.w	r3, r3, #32
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	2378      	movs	r3, #120	; 0x78
 8004b3c:	4828      	ldr	r0, [pc, #160]	; (8004be0 <_printf_i+0x248>)
 8004b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b42:	e7e3      	b.n	8004b0c <_printf_i+0x174>
 8004b44:	0659      	lsls	r1, r3, #25
 8004b46:	bf48      	it	mi
 8004b48:	b2b6      	uxthmi	r6, r6
 8004b4a:	e7e6      	b.n	8004b1a <_printf_i+0x182>
 8004b4c:	4615      	mov	r5, r2
 8004b4e:	e7bb      	b.n	8004ac8 <_printf_i+0x130>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	6826      	ldr	r6, [r4, #0]
 8004b54:	6961      	ldr	r1, [r4, #20]
 8004b56:	1d18      	adds	r0, r3, #4
 8004b58:	6028      	str	r0, [r5, #0]
 8004b5a:	0635      	lsls	r5, r6, #24
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	d501      	bpl.n	8004b64 <_printf_i+0x1cc>
 8004b60:	6019      	str	r1, [r3, #0]
 8004b62:	e002      	b.n	8004b6a <_printf_i+0x1d2>
 8004b64:	0670      	lsls	r0, r6, #25
 8004b66:	d5fb      	bpl.n	8004b60 <_printf_i+0x1c8>
 8004b68:	8019      	strh	r1, [r3, #0]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	4615      	mov	r5, r2
 8004b70:	e7ba      	b.n	8004ae8 <_printf_i+0x150>
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	1d1a      	adds	r2, r3, #4
 8004b76:	602a      	str	r2, [r5, #0]
 8004b78:	681d      	ldr	r5, [r3, #0]
 8004b7a:	6862      	ldr	r2, [r4, #4]
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f7fb fb4e 	bl	8000220 <memchr>
 8004b84:	b108      	cbz	r0, 8004b8a <_printf_i+0x1f2>
 8004b86:	1b40      	subs	r0, r0, r5
 8004b88:	6060      	str	r0, [r4, #4]
 8004b8a:	6863      	ldr	r3, [r4, #4]
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b94:	e7a8      	b.n	8004ae8 <_printf_i+0x150>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	462a      	mov	r2, r5
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	47d0      	blx	sl
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d0ab      	beq.n	8004afc <_printf_i+0x164>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	079b      	lsls	r3, r3, #30
 8004ba8:	d413      	bmi.n	8004bd2 <_printf_i+0x23a>
 8004baa:	68e0      	ldr	r0, [r4, #12]
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	4298      	cmp	r0, r3
 8004bb0:	bfb8      	it	lt
 8004bb2:	4618      	movlt	r0, r3
 8004bb4:	e7a4      	b.n	8004b00 <_printf_i+0x168>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4632      	mov	r2, r6
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	47d0      	blx	sl
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d09b      	beq.n	8004afc <_printf_i+0x164>
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	68e3      	ldr	r3, [r4, #12]
 8004bc8:	9903      	ldr	r1, [sp, #12]
 8004bca:	1a5b      	subs	r3, r3, r1
 8004bcc:	42ab      	cmp	r3, r5
 8004bce:	dcf2      	bgt.n	8004bb6 <_printf_i+0x21e>
 8004bd0:	e7eb      	b.n	8004baa <_printf_i+0x212>
 8004bd2:	2500      	movs	r5, #0
 8004bd4:	f104 0619 	add.w	r6, r4, #25
 8004bd8:	e7f5      	b.n	8004bc6 <_printf_i+0x22e>
 8004bda:	bf00      	nop
 8004bdc:	08004ef5 	.word	0x08004ef5
 8004be0:	08004f06 	.word	0x08004f06

08004be4 <memcpy>:
 8004be4:	440a      	add	r2, r1
 8004be6:	4291      	cmp	r1, r2
 8004be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bec:	d100      	bne.n	8004bf0 <memcpy+0xc>
 8004bee:	4770      	bx	lr
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bfa:	4291      	cmp	r1, r2
 8004bfc:	d1f9      	bne.n	8004bf2 <memcpy+0xe>
 8004bfe:	bd10      	pop	{r4, pc}

08004c00 <memmove>:
 8004c00:	4288      	cmp	r0, r1
 8004c02:	b510      	push	{r4, lr}
 8004c04:	eb01 0402 	add.w	r4, r1, r2
 8004c08:	d902      	bls.n	8004c10 <memmove+0x10>
 8004c0a:	4284      	cmp	r4, r0
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	d807      	bhi.n	8004c20 <memmove+0x20>
 8004c10:	1e43      	subs	r3, r0, #1
 8004c12:	42a1      	cmp	r1, r4
 8004c14:	d008      	beq.n	8004c28 <memmove+0x28>
 8004c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c1e:	e7f8      	b.n	8004c12 <memmove+0x12>
 8004c20:	4402      	add	r2, r0
 8004c22:	4601      	mov	r1, r0
 8004c24:	428a      	cmp	r2, r1
 8004c26:	d100      	bne.n	8004c2a <memmove+0x2a>
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c32:	e7f7      	b.n	8004c24 <memmove+0x24>

08004c34 <_free_r>:
 8004c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c36:	2900      	cmp	r1, #0
 8004c38:	d044      	beq.n	8004cc4 <_free_r+0x90>
 8004c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3e:	9001      	str	r0, [sp, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f1a1 0404 	sub.w	r4, r1, #4
 8004c46:	bfb8      	it	lt
 8004c48:	18e4      	addlt	r4, r4, r3
 8004c4a:	f000 f913 	bl	8004e74 <__malloc_lock>
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <_free_r+0x94>)
 8004c50:	9801      	ldr	r0, [sp, #4]
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	b933      	cbnz	r3, 8004c64 <_free_r+0x30>
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	6014      	str	r4, [r2, #0]
 8004c5a:	b003      	add	sp, #12
 8004c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c60:	f000 b90e 	b.w	8004e80 <__malloc_unlock>
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	d908      	bls.n	8004c7a <_free_r+0x46>
 8004c68:	6825      	ldr	r5, [r4, #0]
 8004c6a:	1961      	adds	r1, r4, r5
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf01      	itttt	eq
 8004c70:	6819      	ldreq	r1, [r3, #0]
 8004c72:	685b      	ldreq	r3, [r3, #4]
 8004c74:	1949      	addeq	r1, r1, r5
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	e7ed      	b.n	8004c56 <_free_r+0x22>
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b10b      	cbz	r3, 8004c84 <_free_r+0x50>
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	d9fa      	bls.n	8004c7a <_free_r+0x46>
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	1855      	adds	r5, r2, r1
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	d10b      	bne.n	8004ca4 <_free_r+0x70>
 8004c8c:	6824      	ldr	r4, [r4, #0]
 8004c8e:	4421      	add	r1, r4
 8004c90:	1854      	adds	r4, r2, r1
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	d1e0      	bne.n	8004c5a <_free_r+0x26>
 8004c98:	681c      	ldr	r4, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	6053      	str	r3, [r2, #4]
 8004c9e:	4421      	add	r1, r4
 8004ca0:	6011      	str	r1, [r2, #0]
 8004ca2:	e7da      	b.n	8004c5a <_free_r+0x26>
 8004ca4:	d902      	bls.n	8004cac <_free_r+0x78>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	e7d6      	b.n	8004c5a <_free_r+0x26>
 8004cac:	6825      	ldr	r5, [r4, #0]
 8004cae:	1961      	adds	r1, r4, r5
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	bf04      	itt	eq
 8004cb4:	6819      	ldreq	r1, [r3, #0]
 8004cb6:	685b      	ldreq	r3, [r3, #4]
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	bf04      	itt	eq
 8004cbc:	1949      	addeq	r1, r1, r5
 8004cbe:	6021      	streq	r1, [r4, #0]
 8004cc0:	6054      	str	r4, [r2, #4]
 8004cc2:	e7ca      	b.n	8004c5a <_free_r+0x26>
 8004cc4:	b003      	add	sp, #12
 8004cc6:	bd30      	pop	{r4, r5, pc}
 8004cc8:	200006a8 	.word	0x200006a8

08004ccc <sbrk_aligned>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4e0e      	ldr	r6, [pc, #56]	; (8004d08 <sbrk_aligned+0x3c>)
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	6831      	ldr	r1, [r6, #0]
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	b911      	cbnz	r1, 8004cde <sbrk_aligned+0x12>
 8004cd8:	f000 f8bc 	bl	8004e54 <_sbrk_r>
 8004cdc:	6030      	str	r0, [r6, #0]
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f000 f8b7 	bl	8004e54 <_sbrk_r>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	d00a      	beq.n	8004d00 <sbrk_aligned+0x34>
 8004cea:	1cc4      	adds	r4, r0, #3
 8004cec:	f024 0403 	bic.w	r4, r4, #3
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d007      	beq.n	8004d04 <sbrk_aligned+0x38>
 8004cf4:	1a21      	subs	r1, r4, r0
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 f8ac 	bl	8004e54 <_sbrk_r>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d101      	bne.n	8004d04 <sbrk_aligned+0x38>
 8004d00:	f04f 34ff 	mov.w	r4, #4294967295
 8004d04:	4620      	mov	r0, r4
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	200006ac 	.word	0x200006ac

08004d0c <_malloc_r>:
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	1ccd      	adds	r5, r1, #3
 8004d12:	f025 0503 	bic.w	r5, r5, #3
 8004d16:	3508      	adds	r5, #8
 8004d18:	2d0c      	cmp	r5, #12
 8004d1a:	bf38      	it	cc
 8004d1c:	250c      	movcc	r5, #12
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	4607      	mov	r7, r0
 8004d22:	db01      	blt.n	8004d28 <_malloc_r+0x1c>
 8004d24:	42a9      	cmp	r1, r5
 8004d26:	d905      	bls.n	8004d34 <_malloc_r+0x28>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	4630      	mov	r0, r6
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	4e2e      	ldr	r6, [pc, #184]	; (8004df0 <_malloc_r+0xe4>)
 8004d36:	f000 f89d 	bl	8004e74 <__malloc_lock>
 8004d3a:	6833      	ldr	r3, [r6, #0]
 8004d3c:	461c      	mov	r4, r3
 8004d3e:	bb34      	cbnz	r4, 8004d8e <_malloc_r+0x82>
 8004d40:	4629      	mov	r1, r5
 8004d42:	4638      	mov	r0, r7
 8004d44:	f7ff ffc2 	bl	8004ccc <sbrk_aligned>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	d14d      	bne.n	8004dea <_malloc_r+0xde>
 8004d4e:	6834      	ldr	r4, [r6, #0]
 8004d50:	4626      	mov	r6, r4
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	d140      	bne.n	8004dd8 <_malloc_r+0xcc>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	eb04 0803 	add.w	r8, r4, r3
 8004d60:	f000 f878 	bl	8004e54 <_sbrk_r>
 8004d64:	4580      	cmp	r8, r0
 8004d66:	d13a      	bne.n	8004dde <_malloc_r+0xd2>
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	3503      	adds	r5, #3
 8004d6c:	1a6d      	subs	r5, r5, r1
 8004d6e:	f025 0503 	bic.w	r5, r5, #3
 8004d72:	3508      	adds	r5, #8
 8004d74:	2d0c      	cmp	r5, #12
 8004d76:	bf38      	it	cc
 8004d78:	250c      	movcc	r5, #12
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f7ff ffa5 	bl	8004ccc <sbrk_aligned>
 8004d82:	3001      	adds	r0, #1
 8004d84:	d02b      	beq.n	8004dde <_malloc_r+0xd2>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	442b      	add	r3, r5
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	e00e      	b.n	8004dac <_malloc_r+0xa0>
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	1b52      	subs	r2, r2, r5
 8004d92:	d41e      	bmi.n	8004dd2 <_malloc_r+0xc6>
 8004d94:	2a0b      	cmp	r2, #11
 8004d96:	d916      	bls.n	8004dc6 <_malloc_r+0xba>
 8004d98:	1961      	adds	r1, r4, r5
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	6025      	str	r5, [r4, #0]
 8004d9e:	bf18      	it	ne
 8004da0:	6059      	strne	r1, [r3, #4]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	bf08      	it	eq
 8004da6:	6031      	streq	r1, [r6, #0]
 8004da8:	5162      	str	r2, [r4, r5]
 8004daa:	604b      	str	r3, [r1, #4]
 8004dac:	4638      	mov	r0, r7
 8004dae:	f104 060b 	add.w	r6, r4, #11
 8004db2:	f000 f865 	bl	8004e80 <__malloc_unlock>
 8004db6:	f026 0607 	bic.w	r6, r6, #7
 8004dba:	1d23      	adds	r3, r4, #4
 8004dbc:	1af2      	subs	r2, r6, r3
 8004dbe:	d0b6      	beq.n	8004d2e <_malloc_r+0x22>
 8004dc0:	1b9b      	subs	r3, r3, r6
 8004dc2:	50a3      	str	r3, [r4, r2]
 8004dc4:	e7b3      	b.n	8004d2e <_malloc_r+0x22>
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	bf0c      	ite	eq
 8004dcc:	6032      	streq	r2, [r6, #0]
 8004dce:	605a      	strne	r2, [r3, #4]
 8004dd0:	e7ec      	b.n	8004dac <_malloc_r+0xa0>
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	6864      	ldr	r4, [r4, #4]
 8004dd6:	e7b2      	b.n	8004d3e <_malloc_r+0x32>
 8004dd8:	4634      	mov	r4, r6
 8004dda:	6876      	ldr	r6, [r6, #4]
 8004ddc:	e7b9      	b.n	8004d52 <_malloc_r+0x46>
 8004dde:	230c      	movs	r3, #12
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4638      	mov	r0, r7
 8004de4:	f000 f84c 	bl	8004e80 <__malloc_unlock>
 8004de8:	e7a1      	b.n	8004d2e <_malloc_r+0x22>
 8004dea:	6025      	str	r5, [r4, #0]
 8004dec:	e7de      	b.n	8004dac <_malloc_r+0xa0>
 8004dee:	bf00      	nop
 8004df0:	200006a8 	.word	0x200006a8

08004df4 <_realloc_r>:
 8004df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df8:	4680      	mov	r8, r0
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	460e      	mov	r6, r1
 8004dfe:	b921      	cbnz	r1, 8004e0a <_realloc_r+0x16>
 8004e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	4611      	mov	r1, r2
 8004e06:	f7ff bf81 	b.w	8004d0c <_malloc_r>
 8004e0a:	b92a      	cbnz	r2, 8004e18 <_realloc_r+0x24>
 8004e0c:	f7ff ff12 	bl	8004c34 <_free_r>
 8004e10:	4625      	mov	r5, r4
 8004e12:	4628      	mov	r0, r5
 8004e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e18:	f000 f838 	bl	8004e8c <_malloc_usable_size_r>
 8004e1c:	4284      	cmp	r4, r0
 8004e1e:	4607      	mov	r7, r0
 8004e20:	d802      	bhi.n	8004e28 <_realloc_r+0x34>
 8004e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e26:	d812      	bhi.n	8004e4e <_realloc_r+0x5a>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f7ff ff6e 	bl	8004d0c <_malloc_r>
 8004e30:	4605      	mov	r5, r0
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d0ed      	beq.n	8004e12 <_realloc_r+0x1e>
 8004e36:	42bc      	cmp	r4, r7
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	bf28      	it	cs
 8004e3e:	463a      	movcs	r2, r7
 8004e40:	f7ff fed0 	bl	8004be4 <memcpy>
 8004e44:	4631      	mov	r1, r6
 8004e46:	4640      	mov	r0, r8
 8004e48:	f7ff fef4 	bl	8004c34 <_free_r>
 8004e4c:	e7e1      	b.n	8004e12 <_realloc_r+0x1e>
 8004e4e:	4635      	mov	r5, r6
 8004e50:	e7df      	b.n	8004e12 <_realloc_r+0x1e>
	...

08004e54 <_sbrk_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d06      	ldr	r5, [pc, #24]	; (8004e70 <_sbrk_r+0x1c>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f7fb fd84 	bl	800096c <_sbrk>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_sbrk_r+0x1a>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_sbrk_r+0x1a>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	200006b0 	.word	0x200006b0

08004e74 <__malloc_lock>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__malloc_lock+0x8>)
 8004e76:	f000 b811 	b.w	8004e9c <__retarget_lock_acquire_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	200006b4 	.word	0x200006b4

08004e80 <__malloc_unlock>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__malloc_unlock+0x8>)
 8004e82:	f000 b80c 	b.w	8004e9e <__retarget_lock_release_recursive>
 8004e86:	bf00      	nop
 8004e88:	200006b4 	.word	0x200006b4

08004e8c <_malloc_usable_size_r>:
 8004e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e90:	1f18      	subs	r0, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfbc      	itt	lt
 8004e96:	580b      	ldrlt	r3, [r1, r0]
 8004e98:	18c0      	addlt	r0, r0, r3
 8004e9a:	4770      	bx	lr

08004e9c <__retarget_lock_acquire_recursive>:
 8004e9c:	4770      	bx	lr

08004e9e <__retarget_lock_release_recursive>:
 8004e9e:	4770      	bx	lr

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
